{"componentChunkName":"component---src-templates-blog-post-js","path":"/2022/list-virtualization/","result":{"data":{"mdx":{"frontmatter":{"articleTitle":"List Virtualization","articleSummary":"Optimize List Performance with Virtualization","articleIcon":"react","articleHeroImg":"/image/virtualized_list/virtualized-list.png","articleCategory":"engineering","articleAuthor":"Irshadi Bagasputro","articlePublishedStatus":true,"articleDateCreatedAt":"26 March 2022"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"articleTitle\": \"List Virtualization\",\n  \"articleSummary\": \"Optimize List Performance with Virtualization\",\n  \"articleIcon\": \"react\",\n  \"articleHeroImg\": \"/image/virtualized_list/virtualized-list.png\",\n  \"articleCategory\": \"engineering\",\n  \"articleAuthor\": \"Irshadi Bagasputro\",\n  \"articlePublishedStatus\": true,\n  \"articleDateCreatedAt\": \"2022-03-26T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"What is List Virtualization ?\"), mdx(\"p\", null, \"There may be times where we need to display a large list or large table that contains many columns or many rows \\u2013 \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"sometimes, even both.\"), \" Loading every single item on such a list \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"can affect performance\"), \" significantly. Enter virtualized list \\u2014or also know as \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\u201Cwindowing\\u201D\"), \", which was a concept of only rendering what is visible to users. This concepts solve the performance problems of rendering large list or table.\"), mdx(\"h2\", null, \"How does List Virtualization Works ?\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/image/virtualized_list/virtualized-list-concept.gif#center\",\n    \"alt\": \"Virtualized List concept by Brian Vaughn\"\n  })), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"Virtualizing\\\"\"), \" a list of items involves\\xA0\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"maintaining a window\"), \"\\xA0and\\xA0\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"moving that window around your list\"), \". The number of elements that are rendered at first is a very small subset of the entire list and the \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"\\\"window\\\"\"), \" of visible content moves when the user continues to scroll. Let\\u2019s put it this way: Imagine you have 1000 list of elements, rather than rendering 1000 of elements \\u2014 \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"which can affects performance, because on slower initial rendering or scroll performance.\"), \" Instead, You only render 5 elements that visible to the user. By implementing virtualized list, it would benefit the low-end devices. You can display more items as the user scrolls, replacing the previous list element with the new one.\"), mdx(\"h2\", null, \"How to implement List Virtualization ?\"), mdx(\"p\", null, \"There\\u2019s several library out there that provides this function. But my top two is by Brian Vaughn, \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-virtualized\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-window\"), \". Personally, I would prefer \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-window\"), \" over the other just because it\\u2019s much smaller and faster. Here\\u2019s the comparison:\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/image/virtualized_list/react-window_bundlesize.png#center\",\n    \"alt\": \"react-window Bundlesize.png\"\n  })), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/image/virtualized_list/react-virtualized_bundlesize.png\",\n    \"alt\": \"react-virtualized Bundlesize.png\"\n  })), mdx(\"p\", null, \"The API\\u2019s for both package are relatively similar, but in this case I will use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"react-window\"), \".\"), mdx(\"h2\", null, \"List Virtualization Implementation\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/image/virtualized_list/list-virtualization.png\",\n    \"alt\": \"List Virtualization.png\"\n  })), mdx(\"p\", null, \"Lists render a\\xA0\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"windowed list (row) of elements\"), \" meaning that only the visible rows are displayed to users (e.g\\xA0\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"https://react-window.now.sh/#/examples/list/fixed-size\"\n  }, \"FixedSizeList\")), \",\\xA0\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"https://react-window.now.sh/#/examples/list/variable-size\"\n  }, \"VariableSizeList\")), \"). Lists use a Grid (internally) to render rows, relaying props to that inner Grid.\"), mdx(\"h2\", null, \"Grid Virtualization Implementation\"), mdx(\"p\", null, mdx(\"img\", {\n    parentName: \"p\",\n    \"src\": \"/image/virtualized_list/grid-virtualization.png\",\n    \"alt\": \"Grid Virtualization.png\"\n  })), mdx(\"p\", null, \"Grid renders\\xA0\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"tabular data\"), \" with virtualization along the X-Axis and Y-Axis \\u2014 \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"this means it has both vertical and horizontal virtualization support.\"), \" (e.g\\xA0\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"https://react-window.now.sh/#/examples/grid/fixed-size\"\n  }, \"FixedSizeGrid\")), \" and\\xA0\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, mdx(\"a\", {\n    parentName: \"strong\",\n    \"href\": \"https://react-window.now.sh/#/examples/grid/variable-size\"\n  }, \"VariableSizeGrid\")), \"). It only renders the Grid cells needed to fill itself based on current horizontal/vertical scroll positions.\"), mdx(\"h2\", null, \"Stay Tuned on the Implementation Guide !\"));\n}\n;\nMDXContent.isMDXComponent = true;","fields":{"slug":"/2022/list-virtualization/","readingTime":{"text":"2 min read"}}},"allMdx":{"nodes":[{"excerpt":"Introduction to Hooks Before we're going to talk about most use cases of React Hooks, I'm gonna tell you what is React Hooks is,—well, I'm not gonna …","frontmatter":{"articleTitle":"React Hooks 101","articleSummary":"Let's get hooked up with React Hooks! An introduction to React Hooks","articleIcon":"react","articleHeroImg":"/react-hooks.png","articleCategory":"engineering","articleAuthor":"Irshadi Bagasputro","articlePublishedStatus":true,"articleDateCreatedAt":"04 December 2020"},"fields":{"slug":"/2020/react-hooks/","readingTime":{"text":"11 min read"}}},{"excerpt":"What is List Virtualization ? There may be times where we need to display a large list or large table that contains many columns or many rows –  some…","frontmatter":{"articleTitle":"List Virtualization","articleSummary":"Optimize List Performance with Virtualization","articleIcon":"react","articleHeroImg":"/image/virtualized_list/virtualized-list.png","articleCategory":"engineering","articleAuthor":"Irshadi Bagasputro","articlePublishedStatus":true,"articleDateCreatedAt":"26 March 2022"},"fields":{"slug":"/2022/list-virtualization/","readingTime":{"text":"2 min read"}}}]}},"pageContext":{"articleCategory":"engineering","slug":"/2022/list-virtualization/"}},"staticQueryHashes":[]}